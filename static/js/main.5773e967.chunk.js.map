{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTabChange","bind","assertThisInitialized","state","currentTab","clickedTab","setState","react_default","a","createElement","className","href","target","rel","title","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAqGeA,qBA1Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,gBAAkBP,EAAKO,gBAAgBC,KAArBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACvBA,EAAKU,MAAQ,CAACC,WAAY,QAHTX,+EAMHY,GACdT,KAAKU,SAAS,CAACF,WAAYC,qCAQ3B,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,uCAAuCC,OAAO,SAASC,IAAI,sBAAsBC,MAAM,YAC7FP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,MAEFH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,kCAAkCC,OAAO,SAASC,IAAI,sBAAsBC,MAAM,aACxFP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,MAEFH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,6BAA6BC,OAAO,SAASC,IAAI,sBAAsBC,MAAM,UACnFP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,MAEFH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,uBAAuBC,OAAO,SAASC,IAAI,sBAAsBC,MAAM,QAC7EP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,MAEFH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,2DAA2DC,OAAO,SAASC,IAAI,sBAAsBC,MAAM,UACjHP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,MAEFH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,6BAA6BC,OAAO,SAASC,IAAI,sBAAsBC,MAAM,WACnFP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,MAEFH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,8CAA8CC,OAAO,SAASC,IAAI,sBAAsBC,MAAM,oBACpGP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,gBAvCIK,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5773e967.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n// import Tab from './Tab.js';\n// import Content from './Content.js';\n// import resumeicon from './resume.svg';\n// import linkedinicon from './linkedin.svg';\n// import behanceicon from './behance.svg';\n// import githubicon from './github.svg';\n// import twittericon from './twitter.svg';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleTabChange = this.handleTabChange.bind(this);\n    this.state = {currentTab: 'home'};\n  }\n\n  handleTabChange(clickedTab) {\n    this.setState({currentTab: clickedTab});\n  }\n\n  render() {\n    // const tabs = ['about', 'work', 'dev', 'arts'];\n    // const backgroundImg = \"/fogg-bg.svg\";\n    // console.log(this.state.currentTab);\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"contents-container\">\n            <a href=\"https://www.linkedin.com/in/kearnie/\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"linkedin\">\n              <div className=\"big-text\">K</div>\n            </a>\n            <a href=\"https://www.behance.net/kearnie\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"portfolio\">\n              <div className=\"big-text\">E</div>\n            </a>\n            <a href=\"https://github.com/kearnie\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"github\">\n              <div className=\"big-text\">A</div>\n            </a>\n            <a href=\"https://transcend.io\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"work\">\n              <div className=\"big-text\">R</div>\n            </a>\n            <a href=\"https://www.cmu.edu/interdisciplinary/programs/bcsa.html\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"school\">\n              <div className=\"big-text\">N</div>\n            </a>\n            <a href=\"https://twitter.com/xkrnie\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"twitter\">\n              <div className=\"big-text\">I</div>\n            </a>\n            <a href=\"https://www.youtube.com/watch?v=Tkc_9OPC20E\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"current fav song\">\n              <div className=\"big-text\">E</div>\n            </a>\n          </div>\n        </header>\n      </div>\n    );\n\n\n    // return (\n    //   <div className=\"App\">\n    //     <header className=\"App-header\">\n    //       <div className=\"tabs-container\">\n    //         <Tab\n    //           tabs={tabs}\n    //           currentTab={this.state.currentTab}\n    //           onTabChange={this.handleTabChange}\n    //         />\n    //       </div>\n    //       <div className=\"contents-container\">\n    //         <Content \n    //           currentTab={this.state.currentTab}\n    //         />\n    //       </div>\n    //       <div className=\"credits\">\n    //         site by kearnie, 2019\n    //       </div>\n    //     </header>\n    //   </div>\n    // );\n\n\n    // return (\n    //   <div className=\"App\">\n    //     <header className=\"App-header\">\n    //       <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //       <p>\n    //         Edit <code>src/App.js</code> and save to reload.\n    //       </p>\n    //       <a\n    //         className=\"App-link\"\n    //         href=\"https://reactjs.org\"\n    //         target=\"_blank\"\n    //         rel=\"noopener noreferrer\"\n    //       >\n    //         Learn React\n    //       </a>\n    //     </header>\n    //   </div>\n    // );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}